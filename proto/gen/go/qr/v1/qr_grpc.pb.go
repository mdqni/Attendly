// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: qr/v1/qr.proto

package qrv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QRService_GenerateQR_FullMethodName = "/qr.v1.QRService/GenerateQR"
	QRService_ValidateQR_FullMethodName = "/qr.v1.QRService/ValidateQR"
)

// QRServiceClient is the client API for QRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QRServiceClient interface {
	GenerateQR(ctx context.Context, in *GenerateQRRequest, opts ...grpc.CallOption) (*GenerateQRResponse, error)
	ValidateQR(ctx context.Context, in *ValidateQRRequest, opts ...grpc.CallOption) (*ValidateQRResponse, error)
}

type qRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQRServiceClient(cc grpc.ClientConnInterface) QRServiceClient {
	return &qRServiceClient{cc}
}

func (c *qRServiceClient) GenerateQR(ctx context.Context, in *GenerateQRRequest, opts ...grpc.CallOption) (*GenerateQRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateQRResponse)
	err := c.cc.Invoke(ctx, QRService_GenerateQR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qRServiceClient) ValidateQR(ctx context.Context, in *ValidateQRRequest, opts ...grpc.CallOption) (*ValidateQRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateQRResponse)
	err := c.cc.Invoke(ctx, QRService_ValidateQR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QRServiceServer is the server API for QRService service.
// All implementations must embed UnimplementedQRServiceServer
// for forward compatibility.
type QRServiceServer interface {
	GenerateQR(context.Context, *GenerateQRRequest) (*GenerateQRResponse, error)
	ValidateQR(context.Context, *ValidateQRRequest) (*ValidateQRResponse, error)
	mustEmbedUnimplementedQRServiceServer()
}

// UnimplementedQRServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQRServiceServer struct{}

func (UnimplementedQRServiceServer) GenerateQR(context.Context, *GenerateQRRequest) (*GenerateQRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQR not implemented")
}
func (UnimplementedQRServiceServer) ValidateQR(context.Context, *ValidateQRRequest) (*ValidateQRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateQR not implemented")
}
func (UnimplementedQRServiceServer) mustEmbedUnimplementedQRServiceServer() {}
func (UnimplementedQRServiceServer) testEmbeddedByValue()                   {}

// UnsafeQRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QRServiceServer will
// result in compilation errors.
type UnsafeQRServiceServer interface {
	mustEmbedUnimplementedQRServiceServer()
}

func RegisterQRServiceServer(s grpc.ServiceRegistrar, srv QRServiceServer) {
	// If the following call pancis, it indicates UnimplementedQRServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QRService_ServiceDesc, srv)
}

func _QRService_GenerateQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateQRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRServiceServer).GenerateQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QRService_GenerateQR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRServiceServer).GenerateQR(ctx, req.(*GenerateQRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QRService_ValidateQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateQRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRServiceServer).ValidateQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QRService_ValidateQR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRServiceServer).ValidateQR(ctx, req.(*ValidateQRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QRService_ServiceDesc is the grpc.ServiceDesc for QRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qr.v1.QRService",
	HandlerType: (*QRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateQR",
			Handler:    _QRService_GenerateQR_Handler,
		},
		{
			MethodName: "ValidateQR",
			Handler:    _QRService_ValidateQR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qr/v1/qr.proto",
}
