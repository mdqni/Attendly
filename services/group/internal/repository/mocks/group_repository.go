// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	groupv1 "github.com/mdqni/Attendly/proto/gen/go/group/v1"
	mock "github.com/stretchr/testify/mock"

	userv1 "github.com/mdqni/Attendly/proto/gen/go/user/v1"
)

// GroupRepository is an autogenerated mock type for the GroupRepository type
type GroupRepository struct {
	mock.Mock
}

// AddUserToGroup provides a mock function with given fields: ctx, groupID, userID
func (_m *GroupRepository) AddUserToGroup(ctx context.Context, groupID string, userID string) (bool, error) {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToGroup")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, groupID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, groupID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: ctx, groupName, department, year
func (_m *GroupRepository) CreateGroup(ctx context.Context, groupName string, department string, year int) (*groupv1.Group, error) {
	ret := _m.Called(ctx, groupName, department, year)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *groupv1.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) (*groupv1.Group, error)); ok {
		return rf(ctx, groupName, department, year)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *groupv1.Group); ok {
		r0 = rf(ctx, groupName, department, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groupv1.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, groupName, department, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: ctx, groupID
func (_m *GroupRepository) GetGroup(ctx context.Context, groupID string) (*groupv1.Group, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *groupv1.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*groupv1.Group, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *groupv1.Group); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groupv1.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsersInGroup provides a mock function with given fields: ctx, groupID
func (_m *GroupRepository) ListUsersInGroup(ctx context.Context, groupID string) ([]*userv1.User, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersInGroup")
	}

	var r0 []*userv1.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*userv1.User, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*userv1.User); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*userv1.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUserFromGroup provides a mock function with given fields: ctx, groupID, userID
func (_m *GroupRepository) RemoveUserFromGroup(ctx context.Context, groupID string, userID string) (bool, error) {
	ret := _m.Called(ctx, groupID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromGroup")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, groupID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, groupID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, groupID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGroupRepository creates a new instance of GroupRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupRepository {
	mock := &GroupRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
